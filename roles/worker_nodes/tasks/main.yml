---
- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - containerd
    update_cache: yes

- name: Enable and start containerd
  systemd:
    name: containerd
    enabled: true
    state: started

- name: Ensure keyrings directory exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download and install Kubernetes APT signing key
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes community-owned APT repo
  copy:
    dest: /etc/apt/sources.list.d/kubernetes.list
    content: |
      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /

- name: Update APT package index
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install kubelet, kubeadm, kubectl, and nfs-utils
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
      - nfs-utils
    state: present
    update_cache: yes

- name: Hold Kubernetes packages to prevent automatic upgrades
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Disable swap immediately
  command: swapoff -a

- name: Disable swap permanently
  replace:
    path: /etc/fstab
    regexp: '^(\s*)[^#]\S+\s+swap\s'
    replace: '# \1'

- name: Ensure br_netfilter is loaded now
  modprobe:
    name: br_netfilter
    state: present

- name: Persist br_netfilter module on reboot
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      br_netfilter

- name: Set required sysctl settings
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - { name: net.bridge.bridge-nf-call-iptables, value: 1 }
    - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }
    - { name: net.ipv4.ip_forward, value: 1 }

- name: Copy join command from master to workers
  fetch:
    src: /tmp/kubeadm_join.sh
    dest: /tmp/kubeadm_join.sh
    flat: yes
  delegate_to: master
  run_once: true

- name: Copy join script to workers
  copy:
    src: /tmp/kubeadm_join.sh
    dest: /tmp/kubeadm_join.sh
    mode: '0700'

- name: Run kubeadm join
  command: "sh /tmp/kubeadm_join.sh"